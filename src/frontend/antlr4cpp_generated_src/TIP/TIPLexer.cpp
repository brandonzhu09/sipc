
// Generated from TIP.g4 by ANTLR 4.13.1


#include "TIPLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct TIPLexerStaticData final {
  TIPLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  TIPLexerStaticData(const TIPLexerStaticData&) = delete;
  TIPLexerStaticData(TIPLexerStaticData&&) = delete;
  TIPLexerStaticData& operator=(const TIPLexerStaticData&) = delete;
  TIPLexerStaticData& operator=(TIPLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag tiplexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
TIPLexerStaticData *tiplexerLexerStaticData = nullptr;

void tiplexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (tiplexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(tiplexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<TIPLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "MUL", "DIV", "MOD", "ADD", "SUB", "GT", 
      "GTE", "LT", "LTE", "EQ", "NE", "NUMBER", "KALLOC", "KINPUT", "KWHILE", 
      "KIF", "KELSE", "KVAR", "KRETURN", "KNULL", "KOUTPUT", "KERROR", "KAND", 
      "KOR", "KTRUE", "KFALSE", "KFOR", "KPOLY", "IDENTIFIER", "WS", "BLOCKCOMMENT", 
      "COMMENT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'('", "','", "')'", "'{'", "'}'", "';'", "'['", "']'", "'of'", 
      "'.'", "'not'", "'&'", "'#'", "'\\u003F'", "':'", "'='", "'..'", "'by'", 
      "'++'", "'--'", "'*'", "'/'", "'%'", "'+'", "'-'", "'>'", "'>='", 
      "'<'", "'<='", "'=='", "'!='", "", "'alloc'", "'input'", "'while'", 
      "'if'", "'else'", "'var'", "'return'", "'null'", "'output'", "'error'", 
      "'and'", "'or'", "'true'", "'false'", "'for'", "'poly'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "MUL", "DIV", "MOD", "ADD", "SUB", "GT", "GTE", "LT", 
      "LTE", "EQ", "NE", "NUMBER", "KALLOC", "KINPUT", "KWHILE", "KIF", 
      "KELSE", "KVAR", "KRETURN", "KNULL", "KOUTPUT", "KERROR", "KAND", 
      "KOR", "KTRUE", "KFALSE", "KFOR", "KPOLY", "IDENTIFIER", "WS", "BLOCKCOMMENT", 
      "COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,52,304,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,
  	1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,
  	1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,
  	1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,
  	1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,
  	1,29,1,30,1,30,1,30,1,31,4,31,180,8,31,11,31,12,31,181,1,32,1,32,1,32,
  	1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,
  	1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,
  	1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,
  	1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,
  	1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,
  	1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,48,1,48,5,48,268,8,48,
  	10,48,12,48,271,9,48,1,49,4,49,274,8,49,11,49,12,49,275,1,49,1,49,1,50,
  	1,50,1,50,1,50,5,50,284,8,50,10,50,12,50,287,9,50,1,50,1,50,1,50,1,50,
  	1,50,1,51,1,51,1,51,1,51,5,51,298,8,51,10,51,12,51,301,9,51,1,51,1,51,
  	1,285,0,52,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
  	25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
  	24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
  	71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,
  	47,95,48,97,49,99,50,101,51,103,52,1,0,5,1,0,48,57,3,0,65,90,95,95,97,
  	122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,
  	308,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
  	1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
  	0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
  	0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
  	1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
  	0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,
  	0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
  	1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,
  	0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,
  	0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,1,105,1,0,0,0,3,
  	107,1,0,0,0,5,109,1,0,0,0,7,111,1,0,0,0,9,113,1,0,0,0,11,115,1,0,0,0,
  	13,117,1,0,0,0,15,119,1,0,0,0,17,121,1,0,0,0,19,124,1,0,0,0,21,126,1,
  	0,0,0,23,130,1,0,0,0,25,132,1,0,0,0,27,134,1,0,0,0,29,136,1,0,0,0,31,
  	138,1,0,0,0,33,140,1,0,0,0,35,143,1,0,0,0,37,146,1,0,0,0,39,149,1,0,0,
  	0,41,152,1,0,0,0,43,154,1,0,0,0,45,156,1,0,0,0,47,158,1,0,0,0,49,160,
  	1,0,0,0,51,162,1,0,0,0,53,164,1,0,0,0,55,167,1,0,0,0,57,169,1,0,0,0,59,
  	172,1,0,0,0,61,175,1,0,0,0,63,179,1,0,0,0,65,183,1,0,0,0,67,189,1,0,0,
  	0,69,195,1,0,0,0,71,201,1,0,0,0,73,204,1,0,0,0,75,209,1,0,0,0,77,213,
  	1,0,0,0,79,220,1,0,0,0,81,225,1,0,0,0,83,232,1,0,0,0,85,238,1,0,0,0,87,
  	242,1,0,0,0,89,245,1,0,0,0,91,250,1,0,0,0,93,256,1,0,0,0,95,260,1,0,0,
  	0,97,265,1,0,0,0,99,273,1,0,0,0,101,279,1,0,0,0,103,293,1,0,0,0,105,106,
  	5,40,0,0,106,2,1,0,0,0,107,108,5,44,0,0,108,4,1,0,0,0,109,110,5,41,0,
  	0,110,6,1,0,0,0,111,112,5,123,0,0,112,8,1,0,0,0,113,114,5,125,0,0,114,
  	10,1,0,0,0,115,116,5,59,0,0,116,12,1,0,0,0,117,118,5,91,0,0,118,14,1,
  	0,0,0,119,120,5,93,0,0,120,16,1,0,0,0,121,122,5,111,0,0,122,123,5,102,
  	0,0,123,18,1,0,0,0,124,125,5,46,0,0,125,20,1,0,0,0,126,127,5,110,0,0,
  	127,128,5,111,0,0,128,129,5,116,0,0,129,22,1,0,0,0,130,131,5,38,0,0,131,
  	24,1,0,0,0,132,133,5,35,0,0,133,26,1,0,0,0,134,135,5,63,0,0,135,28,1,
  	0,0,0,136,137,5,58,0,0,137,30,1,0,0,0,138,139,5,61,0,0,139,32,1,0,0,0,
  	140,141,5,46,0,0,141,142,5,46,0,0,142,34,1,0,0,0,143,144,5,98,0,0,144,
  	145,5,121,0,0,145,36,1,0,0,0,146,147,5,43,0,0,147,148,5,43,0,0,148,38,
  	1,0,0,0,149,150,5,45,0,0,150,151,5,45,0,0,151,40,1,0,0,0,152,153,5,42,
  	0,0,153,42,1,0,0,0,154,155,5,47,0,0,155,44,1,0,0,0,156,157,5,37,0,0,157,
  	46,1,0,0,0,158,159,5,43,0,0,159,48,1,0,0,0,160,161,5,45,0,0,161,50,1,
  	0,0,0,162,163,5,62,0,0,163,52,1,0,0,0,164,165,5,62,0,0,165,166,5,61,0,
  	0,166,54,1,0,0,0,167,168,5,60,0,0,168,56,1,0,0,0,169,170,5,60,0,0,170,
  	171,5,61,0,0,171,58,1,0,0,0,172,173,5,61,0,0,173,174,5,61,0,0,174,60,
  	1,0,0,0,175,176,5,33,0,0,176,177,5,61,0,0,177,62,1,0,0,0,178,180,7,0,
  	0,0,179,178,1,0,0,0,180,181,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,
  	64,1,0,0,0,183,184,5,97,0,0,184,185,5,108,0,0,185,186,5,108,0,0,186,187,
  	5,111,0,0,187,188,5,99,0,0,188,66,1,0,0,0,189,190,5,105,0,0,190,191,5,
  	110,0,0,191,192,5,112,0,0,192,193,5,117,0,0,193,194,5,116,0,0,194,68,
  	1,0,0,0,195,196,5,119,0,0,196,197,5,104,0,0,197,198,5,105,0,0,198,199,
  	5,108,0,0,199,200,5,101,0,0,200,70,1,0,0,0,201,202,5,105,0,0,202,203,
  	5,102,0,0,203,72,1,0,0,0,204,205,5,101,0,0,205,206,5,108,0,0,206,207,
  	5,115,0,0,207,208,5,101,0,0,208,74,1,0,0,0,209,210,5,118,0,0,210,211,
  	5,97,0,0,211,212,5,114,0,0,212,76,1,0,0,0,213,214,5,114,0,0,214,215,5,
  	101,0,0,215,216,5,116,0,0,216,217,5,117,0,0,217,218,5,114,0,0,218,219,
  	5,110,0,0,219,78,1,0,0,0,220,221,5,110,0,0,221,222,5,117,0,0,222,223,
  	5,108,0,0,223,224,5,108,0,0,224,80,1,0,0,0,225,226,5,111,0,0,226,227,
  	5,117,0,0,227,228,5,116,0,0,228,229,5,112,0,0,229,230,5,117,0,0,230,231,
  	5,116,0,0,231,82,1,0,0,0,232,233,5,101,0,0,233,234,5,114,0,0,234,235,
  	5,114,0,0,235,236,5,111,0,0,236,237,5,114,0,0,237,84,1,0,0,0,238,239,
  	5,97,0,0,239,240,5,110,0,0,240,241,5,100,0,0,241,86,1,0,0,0,242,243,5,
  	111,0,0,243,244,5,114,0,0,244,88,1,0,0,0,245,246,5,116,0,0,246,247,5,
  	114,0,0,247,248,5,117,0,0,248,249,5,101,0,0,249,90,1,0,0,0,250,251,5,
  	102,0,0,251,252,5,97,0,0,252,253,5,108,0,0,253,254,5,115,0,0,254,255,
  	5,101,0,0,255,92,1,0,0,0,256,257,5,102,0,0,257,258,5,111,0,0,258,259,
  	5,114,0,0,259,94,1,0,0,0,260,261,5,112,0,0,261,262,5,111,0,0,262,263,
  	5,108,0,0,263,264,5,121,0,0,264,96,1,0,0,0,265,269,7,1,0,0,266,268,7,
  	2,0,0,267,266,1,0,0,0,268,271,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,
  	270,98,1,0,0,0,271,269,1,0,0,0,272,274,7,3,0,0,273,272,1,0,0,0,274,275,
  	1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,277,1,0,0,0,277,278,6,49,
  	0,0,278,100,1,0,0,0,279,280,5,47,0,0,280,281,5,42,0,0,281,285,1,0,0,0,
  	282,284,9,0,0,0,283,282,1,0,0,0,284,287,1,0,0,0,285,286,1,0,0,0,285,283,
  	1,0,0,0,286,288,1,0,0,0,287,285,1,0,0,0,288,289,5,42,0,0,289,290,5,47,
  	0,0,290,291,1,0,0,0,291,292,6,50,0,0,292,102,1,0,0,0,293,294,5,47,0,0,
  	294,295,5,47,0,0,295,299,1,0,0,0,296,298,8,4,0,0,297,296,1,0,0,0,298,
  	301,1,0,0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,302,1,0,0,0,301,299,1,
  	0,0,0,302,303,6,51,0,0,303,104,1,0,0,0,6,0,181,269,275,285,299,1,6,0,
  	0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  tiplexerLexerStaticData = staticData.release();
}

}

TIPLexer::TIPLexer(CharStream *input) : Lexer(input) {
  TIPLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *tiplexerLexerStaticData->atn, tiplexerLexerStaticData->decisionToDFA, tiplexerLexerStaticData->sharedContextCache);
}

TIPLexer::~TIPLexer() {
  delete _interpreter;
}

std::string TIPLexer::getGrammarFileName() const {
  return "TIP.g4";
}

const std::vector<std::string>& TIPLexer::getRuleNames() const {
  return tiplexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& TIPLexer::getChannelNames() const {
  return tiplexerLexerStaticData->channelNames;
}

const std::vector<std::string>& TIPLexer::getModeNames() const {
  return tiplexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& TIPLexer::getVocabulary() const {
  return tiplexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView TIPLexer::getSerializedATN() const {
  return tiplexerLexerStaticData->serializedATN;
}

const atn::ATN& TIPLexer::getATN() const {
  return *tiplexerLexerStaticData->atn;
}




void TIPLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  tiplexerLexerInitialize();
#else
  ::antlr4::internal::call_once(tiplexerLexerOnceFlag, tiplexerLexerInitialize);
#endif
}
